import java.util.regex.Pattern

gradle.allprojects {
    ext.initVersionCode = 1
    ext.initVersionName = "v0.0.1"
    ext.useGitVersionSrc = 1

    // Methods to determine detailed version string
    def getGitDescribe() {
        try {
            def git = 'git describe --abbrev=7 --tags'
            def proc = git.execute()
            proc.waitFor()
            def desc = "${proc.in.text}".trim()
            if (desc.isEmpty()) {
                println(":getGitDescribe - git describe --tags unavailable...")
                git = 'git branch'
                proc = git.execute()
                proc.waitFor()
                desc = "${proc.in.text}".replace('*', ' ')
                desc = "${desc}".trim()
                if (desc.isEmpty()) {
                    println(":getGitDescribe - try git branch unavailable...")
                    return "unknown"
                }
                desc += "-" + initVersionName
            }
            return desc
        } catch (e) {
            println(":getGitDescribe - ", e.getMessage())
            return "unknown"
        }
    }

    def getGitVersionName() {
        try {
            def version = getGitDescribe()
            def user_build = System.getenv("BUILD_NUMBER")
            if (user_build != null) {
                version += "-release " + user_build
            } else {
                version += "-dirty"
            }
            return version
        } catch (e) {
            return "unknown-version"
        }
    }

		def getVersionNameFromAndroidManifestXml() {
        println(":getVersionNameFromAndroidManifestXml - Get Version Name...")
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
            def mVersionName = "v" + majorVersion + "." + minorVersion + "." + pointVersion
            /*def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
            def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
            println(":incrementVersionName - current versionName=" + mVersionName);
            println(":incrementVersionName - new versionName=" + mNextVersionName);
            manifestFile.write(manifestContent)*/
            println(":getVersionNameFromAndroidManifestXml - " + mVersionName);
            return mVersionName
        } else {
            println(":getVersionNameFromAndroidManifestXml - " + initVersionName);
            return initVersionName
        }
    }
    
    def setVersionNameToAndroidManifestXml(String verName) {
        println(":setVersionNameToAndroidManifestXml - Set Version Name...")
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(3))
            def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
            def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
            def mNextVersionName = verName
            def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
            println(":setVersionNameToAndroidManifestXml - current versionName=" + mVersionName);
            println(":setVersionNameToAndroidManifestXml - new versionName=" + mNextVersionName);
            manifestFile.write(manifestContent)
        } else {
            patternVersionNumber = Pattern.compile("package=\".*\"")
            manifestText = manifestFile.getText()
            matcherVersionNumber = patternVersionNumber.matcher(manifestText)
            matcherVersionNumber.find()
            def mVersionName = matcherVersionNumber.group(0)
            def manifestContent = matcherVersionNumber.replaceAll("android:versionName=\"" + verName + "\"" + "\n\t" +
                    mVersionName)
            println(":setVersionNameToAndroidManifestXml - Init versionName=" + verName);
            manifestFile.write(manifestContent)
        }
    }
    
    ext.getDevVersionCode() = {
        println(":getDevVersionCode - Get Version Code...")
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionCode = patternVersionCode.matcher(manifestText)
        if (matcherVersionCode.find()) {
            def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
            /*def mNextVersionCode = mVersionCode + 1
            def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
            println(":incrementVersionCode - current versionCode=" + mVersionCode);
            println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
            manifestFile.write(manifestContent)*/
            println(":getDevVersionCode - " + mVersionCode);
            return mVersionCode
        } else {
            println(":getDevVersionCode - " + initVersionCode);
            return initVersionCode
        }
    }

    ext.getDevVersionName() = {
        def retVersionName
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(.+)(\\d+)\\.(\\d+)\\.(\\d+)(.*)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        if(useGitVersionSrc!=1) {
            println(":getDevVersionName - Get Version Name...")
            if (matcherVersionNumber.find()) {
                def majorVersion = Integer.parseInt(matcherVersionNumber.group(2))
                def minorVersion = Integer.parseInt(matcherVersionNumber.group(3))
                def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
                def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
                /*def mNextVersionName = "v" + majorVersion + "." + minorVersion + "." + (pointVersion + 1)
                def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
                println(":getDevVersionName - current versionName=" + mVersionName);
                println(":getDevVersionName - new versionName=" + mNextVersionName);
                manifestFile.write(manifestContent)*/
                retVersionName = mVersionName
            } else {
                patternVersionNumber = Pattern.compile("package=\".*\"")
                manifestText = manifestFile.getText()
                matcherVersionNumber = patternVersionNumber.matcher(manifestText)
                matcherVersionNumber.find()
                def mVersionName = matcherVersionNumber.group(0)
                def gitVersionName = getGitVersionName()
                if (gitVersionName != "unknown-version") {
                    initVersionName = gitVersionName
                } else {
                    initVersionName += "-dev"
                }
                /*def manifestContent = matcherVersionNumber.replaceAll("android:versionName=\"" + initVersionName + "\"" + "\n\t" +
                        mVersionName)
                println(":incrementVersionName - init versionName=" + initVersionName);
                manifestFile.write(manifestContent)
                println(":incrementVersionName - init versionName=" + initVersionName);*/
                retVersionName = initVersionName
            }
        } else {
            println(":getDevVersionName - Used git Version Name...")
            def gitVersionName = getGitVersionName()
            if (gitVersionName == "unknown-version") {
                gitVersionName += "-dev"
            }
            if (matcherVersionNumber.find()) {
                /*def majorVersion = Integer.parseInt(matcherVersionNumber.group(2))
                def minorVersion = Integer.parseInt(matcherVersionNumber.group(3))
                def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
                def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
                def mNextVersionName = gitVersionName
                def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
                println(":incrementVersionName - current versionName=" + mVersionName);
                println(":incrementVersionName - new versionName=" + mNextVersionName);
                manifestFile.write(manifestContent)*/
                retVersionName = gitVersionName
            } else {
                patternVersionNumber = Pattern.compile("package=\".*\"")
                manifestText = manifestFile.getText()
                matcherVersionNumber = patternVersionNumber.matcher(manifestText)
                matcherVersionNumber.find()
                def mVersionName = matcherVersionNumber.group(0)
                def manifestContent = matcherVersionNumber.replaceAll("android:versionName=\"" + initVersionName + "\"" + "\n\t" +
                        mVersionName)
                println(":getDevVersionName - init versionName=" + initVersionName);
                manifestFile.write(manifestContent)
                retVersionName = initVersionName
            }
        }
        println(":getDevVersionName - " + retVersionName);
        return retVersionName
    }

    
}

/**
 * Takes the existing versionCode in AndroidManifest.xml and increments it for the next release
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionCode=7
 *   2) The AndroidManifest.xml will be modified so that versionCode=8
 */

task incrementVersionCode << {
    println(":incrementVersionCode - Incrementing Version Code...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    if (matcherVersionCode.find()) {
        def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
        def mNextVersionCode = mVersionCode + 1
        def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
        println(":incrementVersionCode - current versionCode=" + mVersionCode);
        println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
        manifestFile.write(manifestContent)
    } else {
        patternVersionCode = Pattern.compile("package=\".*\"")
        manifestText = manifestFile.getText()
        matcherVersionCode = patternVersionCode.matcher(manifestText)
        matcherVersionCode.find()
        def mVersionCode = matcherVersionCode.group(0)
        def manifestContent = matcherVersionCode.replaceAll("android:versionCode=\"" + initVersionCode + "\"" + "\n\t" +
                mVersionCode)
        println(":incrementVersionCode - init versionCode=" + initVersionCode);
        manifestFile.write(manifestContent)
    }
}

/**
 * Takes the existing versionName in AndroidManifest.xml and increments the point number for the next release
 * The AndroidManifest.xml file's versionName needs to be in the format [major].[minor].[point]
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionName=1.3.6
 *   2) TheAndroidManifest.xml will be modified so that versionName=1.3.7
 */

task incrementVersionName << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(.+)(\\d+)\\.(\\d+)\\.(\\d+)(.*)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    if(useGitVersionSrc!=1) {
        println(":incrementVersionName - Incrementing Version Name...")
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(3))
            def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
            def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
            def mNextVersionName = "v" + majorVersion + "." + minorVersion + "." + (pointVersion + 1)
            def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
            println(":incrementVersionName - current versionName=" + mVersionName);
            println(":incrementVersionName - new versionName=" + mNextVersionName);
            manifestFile.write(manifestContent)
        } else {
            patternVersionNumber = Pattern.compile("package=\".*\"")
            manifestText = manifestFile.getText()
            matcherVersionNumber = patternVersionNumber.matcher(manifestText)
            matcherVersionNumber.find()
            def mVersionName = matcherVersionNumber.group(0)
            def gitVersionName = getGitVersionName()
            if (gitVersionName != "unknown-version") {
                initVersionName = gitVersionName
            } else {
                initVersionName += "-dev"
            }
            def manifestContent = matcherVersionNumber.replaceAll("android:versionName=\"" + initVersionName + "\"" + "\n\t" +
                    mVersionName)
            println(":incrementVersionName - init versionName=" + initVersionName);
            manifestFile.write(manifestContent)
        }
    } else {
        println(":incrementVersionName - Used git Version Name...")
        def gitVersionName = getGitVersionName()
        if (gitVersionName == "unknown-version") {
            gitVersionName += "-dev"
        }
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(3))
            def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
            def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
            def mNextVersionName = gitVersionName
            def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
            println(":incrementVersionName - current versionName=" + mVersionName);
            println(":incrementVersionName - new versionName=" + mNextVersionName);
            manifestFile.write(manifestContent)
        } else {
            patternVersionNumber = Pattern.compile("package=\".*\"")
            manifestText = manifestFile.getText()
            matcherVersionNumber = patternVersionNumber.matcher(manifestText)
            matcherVersionNumber.find()
            def mVersionName = matcherVersionNumber.group(0)
            def manifestContent = matcherVersionNumber.replaceAll("android:versionName=\"" + initVersionName + "\"" + "\n\t" +
                    mVersionName)
            println(":incrementVersionName - init versionName=" + initVersionName);
            manifestFile.write(manifestContent)
        }
    }
}

incrementVersionCode.mustRunAfter build
incrementVersionName.mustRunAfter build

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease' || task.name == 'generateDebugBuildConfig') {
        println(":" + task.name + " - Build and Version Increment")
        task.dependsOn 'incrementVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}