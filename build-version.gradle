import java.util.regex.Pattern

gradle.allprojects {
    ext.getDevVersionCodeFromFileAndIncrement = {
        println "Hello getVersionCodeFromFileAndIncrement"
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def version = ++Integer.parseInt(matcher.group(1))
        println sprintf("Returning version %d", version)
        return "$version"
    }

    ext.getDevVersionCode = {
        println "Hello getVersionCode"
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def version = ++Integer.parseInt(matcher.group(1))
        println sprintf("Returning version %d", version)
        return version
    }

    // Methods to determine detailed version string
    ext.gitDescribe = {
        try {
            def git = 'git describe --abbrev=7 --tags'

            def proc = git.execute()
            proc.waitFor()
            def desc = "${proc.in.text}".trim()

            if (desc.isEmpty()) {
                git = 'git branch'
                proc = git.execute()
                proc.waitFor()
                desc = "${proc.in.text}".replace('*', ' ')
                desc = "${desc}".trim()
                if (desc.isEmpty()) {
                    println "ERROR gitDescribe()"
                    return "unknown"
                }
            }
            return desc
        } catch (e) {
            return "unknown"
        }
    }

    ext.getDevVersionName = {
        try {
            // determine git-describe output
            def version = gitDescribe()

            // add on jenkins or travis build information
            def jenkins_build = System.getenv("BUILD_NUMBER")
            def travis_build = System.getenv("TRAVIS_BUILD_NUMBER")
            if (jenkins_build != null) {
                version += "-b" + jenkins_build
            } else if (travis_build != null) {
                version += "-trv" + travis_build
            } else {
                version += "-dev"
            }
            //println sprintf("Returning versionName %s", version)
            return version
        } catch (e) {
            //println sprintf("getDevVersionName() %s", e.getMessage())
            return "unknown-version"
        }
    }
}

task('increaseVersionCode') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    android.defaultConfig.versionCode = versionCode + 1
    println "Setting version code to ${android.defaultConfig.versionCode}"
    def manifestContent = matcher.replaceAll("versionCode=\"" + android.defaultConfig.versionCode + "\"")
    manifestFile.write(manifestContent)
}

task('setVersionName') << {

    def git = 'git describe --abbrev=7 --tags'

    def proc = git.execute()
    proc.waitFor()
    def desc = "${proc.in.text}".trim()

    if (desc.isEmpty()) {
        git = 'git branch'
        proc = git.execute()
        proc.waitFor()
        desc = "${proc.in.text}".replace('*', ' ')
        desc = "${desc}".trim()
        if (desc.isEmpty()) {
            println "ERROR setting version name"
            return
        }
    }

    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionName=\"(.*)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    println "Setting version name to ${desc}"
    def manifestContent = matcher.replaceAll("versionName=\"" + desc + "\"")
    manifestFile.write(manifestContent)
}

task release << {
    println(":release - Build and Version Increment")
}
 
task debug << {
    println(":debug - Build")
}

tasks.whenTaskAdded { task ->
    incrementVersionName.mustRunAfter build
		incrementVersionCode.mustRunAfter build
		
    if (task.name == 'assembleRelease' || task.name == 'assembleDebug') {
        task.dependsOn 'incrementVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}