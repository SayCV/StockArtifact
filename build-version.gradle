import java.util.regex.Pattern

ext.useGitVersionSrc = 1

ext.initIncrementStep = 10

ext.initVersionCode = 1

ext.initMajorVersionName = 0
ext.initMinorVersionName = 0
ext.initPointVersionName = 1
ext.initPlusVersionName = ""

// v0.0.1
ext.initVersionName = "v" + initMajorVersionName + "." + initMinorVersionName + "." + initPointVersionName + initPlusVersionName

ext.retMajorVersionName = initMajorVersionName
ext.retMinorVersionName = initMinorVersionName
ext.retPointVersionName = initPointVersionName
ext.retPlusVersionName = initPlusVersionName
ext.retVersionName = "v" + retMajorVersionName + "." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName

// To make new git tag
def setNewGitTag() {
	try {
				//retMajorVersionName retMinorVersionName retPointVersionName retPlusVersionName
				def newGitTagName = "v" + retMajorVersionName+"." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
        def git = 'git tag' + newGitTagName
        println(":setNewGitTag() - " + git)
        def proc = git.execute()
        proc.waitFor()
        def desc = "${proc.in.text}".trim()
        if (desc.isEmpty()) {
            println(":setNewGitTag() - " + newGitTagName)
            git = 'git push --tags'
            proc = git.execute()
            proc.waitFor()
            desc = "${proc.in.text}".replace('*', ' ')
            desc = "${desc}".trim()
            /*if (desc.isEmpty()) {
                println(":setNewGitTag() - try git branch unavailable...")
                return "unknown"
            }*/
            return 0
        }
        return 1
    } catch (e) {
        println(":setNewGitTag() - ", e.getMessage())
        return 1
    }
}

// Methods to determine detailed version string
def getGitDescribe() {
    try {
        def git = 'git describe --abbrev=7 --tags'
        def proc = git.execute()
        proc.waitFor()
        def desc = "${proc.in.text}".trim()
        if (desc.isEmpty()) {
            println(":getGitDescribe() - git describe --tags unavailable...")
            git = 'git branch'
            proc = git.execute()
            proc.waitFor()
            desc = "${proc.in.text}".replace('*', ' ')
            desc = "${desc}".trim()
            if (desc.isEmpty()) {
                println(":getGitDescribe() - try git branch unavailable...")
                return "unknown"
            }
            desc += "-" + initVersionName
        }
        return desc
    } catch (e) {
        println(":getGitDescribe() - ", e.getMessage())
        return "unknown"
    }
}

def getGitVersionInfo() {
    try {
        def version = getGitDescribe()
        //version += "-" + getDevVersionCode()
        def user_build = System.getenv("BUILD_NUMBER")
        if (user_build != null) {
            version += "-release " + user_build
        } else {
            version += "-dirty"
        }
        return version
    } catch (e) {
        return "git-unknown-version"
    }
}

def setGitVersionNameToFile() {
    println(":setGitVersionNameToFile - Save Version Name to temp file...")
    def tmpFile = rootProject.file("gitVersion.tmp")
    if(!tmpFile.canRead())
        tmpFile.createNewFile() //File.createTempFile("gitVersion", null/*.tmp*/, rootProject.projectDir)
    def patternVersionNumber = Pattern.compile("versionName=\"(.*)v(\\d+)\\.(\\d+)\\.(\\d+)(.*)\"")
    def tmpText = tmpFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(tmpText)
    def mVersionName
    def mNextVersionName
    def tmpContent
    mNextVersionName = "v" + retMajorVersionName + "." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
    if (matcherVersionNumber.find()) {
        def majorVersionName = Integer.parseInt(matcherVersionNumber.group(2))
        def minorVersionName = Integer.parseInt(matcherVersionNumber.group(3))
        def pointVersionName = Integer.parseInt(matcherVersionNumber.group(4))
        def plusVersionName = ( matcherVersionNumber.groupCount() >=5 ) ? matcherVersionNumber.group(5) : ""
        mVersionName = "v" + majorVersionName+"." + minorVersionName + "." + pointVersionName + plusVersionName
        tmpContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    } else {
        println(":setGitVersionNameToFile - No match found");
        tmpContent = "versionName=\"" + mNextVersionName + "\""
    }
    println(":setGitVersionNameToFile - current versionName=" + mVersionName);
    println(":setGitVersionNameToFile - new versionName=" + mNextVersionName);
    tmpFile.write(tmpContent)
}

def getGitVersionNameFromFile() {
    println(":getGitVersionNameFromFile - Get Version Name from temp file...")
    def tmpFile = rootProject.file("gitVersion.tmp")
    if(!tmpFile.canRead())
        tmpFile.createNewFile() //File.createTempFile("gitVersion", null/*.tmp*/, rootProject.projectDir)
    def patternVersionNumber = Pattern.compile("versionName=\"(.*)v(\\d+)\\.(\\d+)\\.(\\d+)(.*)\"")
    def tmpText = tmpFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(tmpText)
    def mVersionName
    def mNextVersionName
    def tmpContent
    //mNextVersionName = "v" + retMajorVersionName + "." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
    if (matcherVersionNumber.find()) {
        retMajorVersionName = Integer.parseInt(matcherVersionNumber.group(2))
        retMinorVersionName = Integer.parseInt(matcherVersionNumber.group(3))
        retPointVersionName = Integer.parseInt(matcherVersionNumber.group(4))
        retPlusVersionName = ( matcherVersionNumber.groupCount() >=5 ) ? matcherVersionNumber.group(5) : ""
        retVersionName = "v" + retMajorVersionName+"." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
        //tmpContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    } else {
        /*retMajorVersionName = initMajorVersionName
        retMinorVersionName = initMinorVersionName
        retPointVersionName = initPointVersionName
        retPlusVersionName = initPlusVersionName
        retVersionName = initVersionName*/
        getVersionNameFromGit()
    }
    println(":getGitVersionNameFromFile - " + retVersionName);
    return retVersionName
}

def getVersionNameFromAndroidManifestXml() {
    println(":getVersionNameFromAndroidManifestXml - Get Version Name...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(.*)v(\\d+)\\.(\\d+)\\.(\\d+)(.*)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    if (matcherVersionNumber.find()) {
        retMajorVersionName = Integer.parseInt(matcherVersionNumber.group(2))
        retMinorVersionName = Integer.parseInt(matcherVersionNumber.group(3))
        retPointVersionName = Integer.parseInt(matcherVersionNumber.group(4))
        retPlusVersionName = ( matcherVersionNumber.groupCount() >=5 ) ? matcherVersionNumber.group(5) : ""
        retVersionName = "v" + retMajorVersionName+"." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
    } else {
        retMajorVersionName = initMajorVersionName
        retMinorVersionName = initMinorVersionName
        retPointVersionName = initPointVersionName
        retPlusVersionName = initPlusVersionName
        retVersionName = initVersionName
    }
    println(":getVersionNameFromAndroidManifestXml - " + retVersionName);
    return retVersionName
}

def setVersionNameToAndroidManifestXml() {
    println(":setVersionNameToAndroidManifestXml - Set Version Name...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(.*)v(\\d+)\\.(\\d+)\\.(\\d+)(.*)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    def mVersionName
    def mNextVersionName
    def manifestContent
    if (matcherVersionNumber.find()) {
        def majorVersion = Integer.parseInt(matcherVersionNumber.group(2))
        def minorVersion = Integer.parseInt(matcherVersionNumber.group(3))
        def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
        def plusVersionName = ( matcherVersionNumber.groupCount() >=5 ) ? matcherVersionNumber.group(5) : ""
        mVersionName = "v" + majorVersion + "." + minorVersion + "." + pointVersion + plusVersionName
        mNextVersionName = "v" + retMajorVersionName + "." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
        manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    } else {
        patternVersionNumber = Pattern.compile("package=\".*\"")
        manifestText = manifestFile.getText()
        matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        matcherVersionNumber.find()
        def mAddHereName = matcherVersionNumber.group(0)
        mVersionName = "NULL"
        mNextVersionName = "v" + retMajorVersionName + "." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
        manifestContent = matcherVersionNumber.replaceAll("android:versionName=\"" + mNextVersionName + "\"" + "\n\t" + mAddHereName)
    }
    println(":setVersionNameToAndroidManifestXml - current versionName=" + mVersionName);
    println(":setVersionNameToAndroidManifestXml - new versionName=" + mNextVersionName);
    manifestFile.write(manifestContent)
}

def getVersionNameFromGit() {
    println(":getVersionNameFromGit - Get Version Name...")
    def patternVersionNumber = Pattern.compile("(.*)v(\\d+)\\.(\\d+)\\.(\\d+)(.*)")
    def manifestText = getGitVersionInfo()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    println(":getVersionNameFromGit - " + manifestText);
    if (matcherVersionNumber.find()) {
        retMajorVersionName = Integer.parseInt(matcherVersionNumber.group(2))
        retMinorVersionName = Integer.parseInt(matcherVersionNumber.group(3))
        retPointVersionName = Integer.parseInt(matcherVersionNumber.group(4))
        retPlusVersionName = ( matcherVersionNumber.groupCount() >=5 ) ? matcherVersionNumber.group(5) : ""
        retVersionName = "v" + retMajorVersionName+"." + retMinorVersionName + "." + retPointVersionName + retPlusVersionName
    } else {
        retMajorVersionName = initMajorVersionName
        retMinorVersionName = initMinorVersionName
        retPointVersionName = initPointVersionName
        retPlusVersionName = initPlusVersionName
        retVersionName = initVersionName
        System.err.println(":getVersionNameFromGit - Error Formatter - Used initVersionName")
        //logger.error(":getVersionNameFromGit - Error Formatter")
    }
    println(":getVersionNameFromGit - " + retVersionName);
    return retVersionName
}

gradle.allprojects {
    
    ext.getDevVersionCode = {
        println(":getDevVersionCode - Get Version Code...")
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionCode = patternVersionCode.matcher(manifestText)
        if (matcherVersionCode.find()) {
            def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
            /*def mNextVersionCode = mVersionCode + 1
            def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
            println(":incrementVersionCode - current versionCode=" + mVersionCode);
            println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
            manifestFile.write(manifestContent)*/
            println(":getDevVersionCode - " + mVersionCode);
            return mVersionCode
        } else {
            println(":getDevVersionCode - " + initVersionCode);
            return initVersionCode
        }
    }

    ext.getDevVersionName = {
        println(":getDevVersionName - Get Version Name...")
        if(useGitVersionSrc != 1) {
            return getVersionNameFromAndroidManifestXml()
        } else {
            println(":getDevVersionName - Used git Version Name...")
            return getVersionNameFromGit()
        }
    }
}

/**
 * Takes the existing versionCode in AndroidManifest.xml and increments it for the next release
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionCode=7
 *   2) The AndroidManifest.xml will be modified so that versionCode=8
 */

task incrementVersionCode << {
    println(":incrementVersionCode - Incrementing Version Code...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    if (matcherVersionCode.find()) {
        def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
        def mNextVersionCode = mVersionCode + 1
        def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
        println(":incrementVersionCode - current versionCode=" + mVersionCode);
        println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
        manifestFile.write(manifestContent)
    } else {
        patternVersionCode = Pattern.compile("package=\".*\"")
        manifestText = manifestFile.getText()
        matcherVersionCode = patternVersionCode.matcher(manifestText)
        matcherVersionCode.find()
        def mVersionCode = matcherVersionCode.group(0)
        def manifestContent = matcherVersionCode.replaceAll("android:versionCode=\"" + initVersionCode + "\"" + "\n\t" +
                mVersionCode)
        println(":incrementVersionCode - init versionCode=" + initVersionCode);
        manifestFile.write(manifestContent)
    }
}

/**
 * Takes the existing versionName in AndroidManifest.xml and increments the point number for the next release
 * The AndroidManifest.xml file's versionName needs to be in the format [major].[minor].[point]
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionName=1.3.6
 *   2) TheAndroidManifest.xml will be modified so that versionName=1.3.7
 */

task incrementVersionName << {
    println(":incrementVersionName - Incrementing Version Name...")
    if(useGitVersionSrc != 1) {
        getVersionNameFromAndroidManifestXml()
        //retMajorVersionName retMinorVersionName retPointVersionName retPlusVersionName
        retPointVersionName++
        if(retPointVersionName >= initIncrementStep) retMinorVersionName++
        if(retMinorVersionName >= initIncrementStep) {
        	retMajorVersionName++
        	retMinorVersionName = 0
        	retPointVersionName = 0
        	retPlusVersionName = ""
        	setNewGitTag()
        }
        setVersionNameToAndroidManifestXml()
    } else {
        println(":incrementVersionName - Used git Version Name...")
        getGitVersionNameFromFile()
        		retPointVersionName++
            if(retPointVersionName >= initIncrementStep) retMinorVersionName++
            if(retMinorVersionName >= initIncrementStep) {
            	retMajorVersionName++
        			retMinorVersionName = 0
        			retPointVersionName = 0
        			retPlusVersionName = ""
        			setNewGitTag()
            }
        setVersionNameToAndroidManifestXml()
        setGitVersionNameToFile()
    }
}

incrementVersionCode.mustRunAfter build
incrementVersionName.mustRunAfter build

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease' || task.name == 'generateDebugBuildConfig') {
        println(":" + task.name + " - Build and Version Increment")
        task.dependsOn 'incrementVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}